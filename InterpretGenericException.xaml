<Activity mc:Ignorable="sap sap2010" x:Class="SubprocessTemplate" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:str="clr-namespace:System.Text.RegularExpressions;assembly=System.Text.RegularExpressions" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Exception" Type="InArgument(s:Exception)" />
    <x:Property Name="out_ExceptionType" Type="OutArgument(x:String)" />
    <x:Property Name="out_StackTrace" Type="OutArgument(x:String)" />
    <x:Property Name="out_Source" Type="OutArgument(x:String)" />
    <x:Property Name="out_Message" Type="OutArgument(x:String)" />
    <x:Property Name="out_IsGeneric" Type="OutArgument(x:Boolean)" />
    <x:Property Name="out_TypeContext" Type="OutArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1131,6137</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>SubprocessTemplate_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="DESCRIPTION: Given an exception as an input argument, determine fi that exception is generic. If so, determine some of the properties of the inner exception and return them as output arguments (message, exception type, type context, stack trace, and source). Log the full details of the generic exception.&#xA;PRECONDITIONS: in_Exception is populated.&#xA;POSTCONDITIONS: N/A&#xA;ARGUMENTS: in_Exception (System.Exception), out_IsGeneric (Boolean), out_Message (String), out_ExceptionType (String), out_StackTrace (String), out_Source (String), out_TypeContext (String)" DisplayName="InterpretGenericException.xaml" sap:VirtualizedContainerService.HintSize="697,6072" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="635,141" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;InterpretGenericException.xaml: Starting workflow.&quot;]" />
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="635,52" sap2010:WorkflowViewState.IdRef="CommentOut_1">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="534,574" sap2010:WorkflowViewState.IdRef="Sequence_10">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="472,310" sap2010:WorkflowViewState.IdRef="TryCatch_1">
            <TryCatch.Variables>
              <Variable x:TypeArguments="s:String[]" Name="TestArray" />
              <Variable x:TypeArguments="x:String" Name="TestString" />
            </TryCatch.Variables>
            <TryCatch.Try>
              <Assign sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_10">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[TestString]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[TestArray(1)]</InArgument>
                </Assign.Value>
              </Assign>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="438,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                  </ActivityAction.Argument>
                  <Assign sap:VirtualizedContainerService.HintSize="434,81" sap2010:WorkflowViewState.IdRef="Assign_11">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:Exception">[in_Exception]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                    </Assign.Value>
                  </Assign>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
          <Assign sap2010:Annotation.AnnotationText="DELETE WHEN LIVE" sap:VirtualizedContainerService.HintSize="472,113" sap2010:WorkflowViewState.IdRef="Assign_1">
            <Assign.To>
              <OutArgument x:TypeArguments="s:Exception">[in_Exception]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="s:Exception">[New SystemException("test exception")]</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <Sequence DisplayName="Verify Preconditions" sap:VirtualizedContainerService.HintSize="635,471" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If Condition="[in_Exception Is Nothing]" DisplayName="If input argument not populated" sap:VirtualizedContainerService.HintSize="410,360" sap2010:WorkflowViewState.IdRef="If_1">
        <If.Then>
          <Sequence sap:VirtualizedContainerService.HintSize="376,178" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Throw DisplayName="Throw Utility SE" Exception="[New SystemException(&quot;Utilities_InterpretGenericException_SE0001 in component InterpretGenericException.xaml: The exception could not be found.&quot;)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_1" />
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6" />
        </If.Else>
      </If>
    </Sequence>
    <Sequence DisplayName="Actions" sap:VirtualizedContainerService.HintSize="635,4672" sap2010:WorkflowViewState.IdRef="Sequence_4">
      <Sequence.Variables>
        <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="Matches" />
        <Variable x:TypeArguments="s:Exception" Name="InnerException" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign sap2010:Annotation.AnnotationText="i.e., operate only on the original exception thrown, rather than a rethrown / modified exception." DisplayName="Assign out_InnerException" sap:VirtualizedContainerService.HintSize="573,124" sap2010:WorkflowViewState.IdRef="Assign_7">
        <Assign.To>
          <OutArgument x:TypeArguments="s:Exception">[InnerException]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="s:Exception">[in_Exception.InnerException]</InArgument>
        </Assign.Value>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </Assign>
      <If sap2010:Annotation.AnnotationText="Sometimes the inner exception is empty since there have been no modifications. In this case we will use the exception itself." Condition="[InnerException Is Nothing]" DisplayName="If at root exception already" sap:VirtualizedContainerService.HintSize="573,394" sap2010:WorkflowViewState.IdRef="If_2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <Sequence sap:VirtualizedContainerService.HintSize="476,170" sap2010:WorkflowViewState.IdRef="Sequence_11">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign out_InnerException" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_12">
              <Assign.To>
                <OutArgument x:TypeArguments="s:Exception">[InnerException]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="s:Exception">[in_Exception]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_12" />
        </If.Else>
      </If>
      <ui:Matches FirstMatch="{x:Null}" sap2010:Annotation.AnnotationText="Find matches for exception codes in the message of the inner exception. e.g., SE0001, or SYSTEM_COMPONENT_SE0001" DisplayName="Find Matching Patterns" sap:VirtualizedContainerService.HintSize="573,117" sap2010:WorkflowViewState.IdRef="Matches_1" Input="[InnerException.Message]" IsBuilderTabModified="False" Pattern="([a-zA-Z]+_)*SE\d{4}" RegexOption="IgnoreCase, Compiled" Result="[Matches]">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:Matches>
      <ui:IfElseIfV2 sap2010:Annotation.AnnotationText="If there is one exception code in the exception, then skip interpretation. If there is more than one, log a warning then skip interpretation, if there are zero matches then we must interpret the generic exception." Condition="[Matches.Count=1]" DisplayName="Else If" sap:VirtualizedContainerService.HintSize="573,3806" sap2010:WorkflowViewState.IdRef="IfElseIfV2_1">
        <ui:IfElseIfV2.Else>
          <Sequence DisplayName="" sap:VirtualizedContainerService.HintSize="539,2720" sap2010:WorkflowViewState.IdRef="Sequence_9">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="LogMessage" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="497,141" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[&quot;Generic exception encountered.&quot;]" />
            <Assign sap2010:Annotation.AnnotationText="i.e., whether or not that exception is generic at all." sap:VirtualizedContainerService.HintSize="497,113" sap2010:WorkflowViewState.IdRef="Assign_8">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Boolean">[out_IsGeneric]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Boolean">True</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
            <Assign sap2010:Annotation.AnnotationText="i.e., the exception message itself for completeness." DisplayName="Assign out_Message" sap:VirtualizedContainerService.HintSize="497,113" sap2010:WorkflowViewState.IdRef="Assign_9">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[out_Message]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[InnerException.Message]</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
            <Assign sap2010:Annotation.AnnotationText="Obtain the exception type (e.g., UiPath.Core.Activities.ActivityTimeoutException)" DisplayName="Assign out_ExceptionType" sap:VirtualizedContainerService.HintSize="497,124" sap2010:WorkflowViewState.IdRef="Assign_4">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[out_ExceptionType]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[InnerException.GetType.ToString]</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
            <Assign sap2010:Annotation.AnnotationText="i.e., the sequence of method calls which led to that exception being thrown." DisplayName="Assign out_StackTrace" sap:VirtualizedContainerService.HintSize="497,124" sap2010:WorkflowViewState.IdRef="Assign_5">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[out_StackTrace]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[InnerException.StackTrace]</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
            <Assign sap2010:Annotation.AnnotationText="i.e., the name of the application or object which caused the exception, typically an activity in Studio." DisplayName="Assign out_StackTrace" sap:VirtualizedContainerService.HintSize="497,124" sap2010:WorkflowViewState.IdRef="Assign_6">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[out_Source]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[InnerException.Source]</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
            <Switch x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="The exception type can be  many values, some are .NET exception types whereas others are exceptions unique to UiPath. For each type we could realistically encounter, we assign a type context to allow the generic exception to be more human-readable in the stakeholder-facing reports whereas the logs will be sufficiently detailed for the developer to be able to diagnose the issue." DisplayName="Switch" Expression="[out_ExceptionType]" sap:VirtualizedContainerService.HintSize="497,1277" sap2010:WorkflowViewState.IdRef="Switch`1_1">
              <Switch.Default>
                <Sequence DisplayName="Not Found" sap:VirtualizedContainerService.HintSize="496,416" sap2010:WorkflowViewState.IdRef="Sequence_13">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,141" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Warn" Message="[&quot;The exception type has no listed context. [&quot;+out_ExceptionType+&quot;]&quot;]" />
                  <Assign sap2010:Annotation.AnnotationText="This is very vague, but is the truth - if we have't listed a context below then we've never seen this before." DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,124" sap2010:WorkflowViewState.IdRef="Assign_14">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">["Unknown error"]</InArgument>
                    </Assign.Value>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Assign>
                </Sequence>
              </Switch.Default>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign x:Key="UiPath.Core.Activities.ActivityTimeoutException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_15">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Occurs when an activity exceeds its specified timeout period.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.ElementOperationException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_16">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when an operation on a UI element fails, often due to the element being in an unexpected state."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.ImageOperationException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_17">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Raised when image-based automation activities (like image recognition or OCR) fail."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.BrowserOperationException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_18">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Thrown when there is an issue with browser-related activities, such as navigation or interacting with web elements.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.ActivityFileNotFoundException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_19">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Occurs when a specified file is not found or accessible."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.ApplicationException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_20">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">A general-purpose exception that can be used to indicate an application-level error.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.InvalidOperationException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_21">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when a method call is invalid for the object's current state."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.FormatException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_22">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Occurs when a string is not in a correct format for parsing."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.IO.IOException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_23">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Raised when an I/O operation fails or is interrupted."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Security.SecurityException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_24">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Occurs when a security error is detected, such as insufficient permissions.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.OutOfMemoryException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_25">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when there is not enough memory to continue the execution of a program."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.InvalidCastException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_26">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Raised when an invalid type casting or explicit conversion is attempted."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.DivideByZeroException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_27">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Occurs when an attempt to divide by zero is made."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.NotSupportedException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_28">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when an invoked method is not supported or not implemented."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.ObjectDisposedException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_29">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Occurs when an operation is performed on a disposed object."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.AggregateException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_30">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when multiple exceptions occur, typically in asynchronous operations."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.AccessViolationException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_31">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Raised when there is an attempt to read or write protected memory."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.Excel.ExcelException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_32">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Specific to Excel-related activities, indicating issues like file corruption or access problems."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.Mail.MailException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_33">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown during email automation when there are issues with sending or receiving emails."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.Queue.QueueOperationException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_34">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Occurs when operations on Orchestrator queues fail.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.Transaction.TransactionAbortedException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_35">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Raised when a transaction is aborted, typically in transaction-based workflows.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.SAPException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_36">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Specific to SAP automation activities, indicating failures in interacting with SAP GUI elements."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.TerminalException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_37">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Occurs during terminal (mainframe) automation when terminal operations fail.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Data.DataException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_38">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["General exception for ADO.NET operations, such as accessing databases."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Net.WebException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_39">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Occurs during network-related operations, like accessing web services.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Reflection.TargetInvocationException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_40">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Thrown when an invoked method through reflection throws an exception.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Xml.XmlException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_41">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Raised when an error occurs during XML processing.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="UiPath.Core.SelectorNotFoundException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_42">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Thrown when the specified selector for a UI element is not found.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.NullReferenceException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_43">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["A variable or argument was not populated at runtime, and therefore could not be accessed. Occurs when you try to dereference a null object reference."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.ArgumentNullException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_44">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Thrown when a null argument is passed to a method that does not accept it.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.ArgumentException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_45">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Raised when an argument provided to a method is invalid."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.ArgumentOutOfRangeException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_46">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Thrown when an argument's value is outside the allowable range.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.IndexOutOfRangeException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_47">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["The index is outside the range of an array or collection, meaning it exceeds its capacity."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.TimeoutException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_48">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Occurs when an operation that was supposed to take place within a certain timeframe has expired."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Runtime.InteropServices.COMException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_49">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when an unhandled COM (Component Object Model) error occurs. This exception typically arises when working with unmanaged code, COM objects, or using interop services to call native code from managed code. Caused by issues with the underlying COM object, such as improper initialization, method calls that fail, or COM-related configuration problems."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.ComponentModel.Win32Exception" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_50">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Raised when a Win32 error code is returned. This exception is often encountered when calling native Windows API functions."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Threading.ThreadAbortException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_51">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when a call is made to the Abort method to destroy a thread. This exception is a special one that can be caught but will automatically be rethrown at the end of the catch block."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Threading.Tasks.TaskCanceledException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_52">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Occurs when a task is canceled. This exception is typically encountered when using tasks with cancellation tokens.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.KeyNotFoundException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_53">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when an attempt is made to access a key in a dictionary that does not exist. This exception indicates that the specified key was not found in the collection."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.MethodAccessException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_54">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Thrown when there is an illegal attempt to access a method. This exception often occurs when trying to access a method that is not accessible due to its protection level.</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.InvalidProgramException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_55">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Thrown when a program contains invalid MSIL (Microsoft Intermediate Language) or metadata. This exception usually indicates a bug in the compiler or corrupted program files. Caused by issues with the compiler generating incorrect IL code, corrupt assemblies, or invalid program binaries."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.SystemException" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_56">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Default system exception type for UiPath Studio. This exception is likely a non-generic exception with a bad exception code."]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign x:Key="System.Exception" DisplayName="Assign out_TypeContext" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_57">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_TypeContext]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">["Default system exception type for UiPath Studio, specifically the official REFramework template. This is likely to be an REFramework setup / integration failure."]</InArgument>
                </Assign.Value>
              </Assign>
            </Switch>
            <Assign sap2010:Annotation.AnnotationText="Now define the string to be logged to display all the information on the generic exception that we can find. How the developer uses the information provided in the output arguments is up to them, as it varies on project context." DisplayName="Assign LogMessage" sap:VirtualizedContainerService.HintSize="497,155" sap2010:WorkflowViewState.IdRef="Assign_13">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[LogMessage]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String" xml:space="preserve">["Generic Exception Encountered:"+Environment.NewLine+
"MESSAGE: "+out_Message+Environment.NewLine+
"TYPE: "+out_ExceptionType+Environment.NewLine+
"CONTEXT: "+out_TypeContext+Environment.NewLine+
"SOURCE: "+out_Source+Environment.NewLine+
"STACK TRACE: "+Environment.NewLine+out_StackTrace]</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
            <ui:LogMessage DisplayName="Log Message Warn" sap:VirtualizedContainerService.HintSize="497,141" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Warn" Message="[LogMessage]" />
          </Sequence>
        </ui:IfElseIfV2.Else>
        <ui:IfElseIfV2.ElseIfs>
          <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
            <ui:IfElseIfBlock BlockType="ElseIf" Condition="[Matches.Count&gt;1]" DisplayName="If else if block" sap2010:WorkflowViewState.IdRef="IfElseIfBlock_1">
              <ui:IfElseIfBlock.Then>
                <Sequence DisplayName="More than 1 exception code" sap:VirtualizedContainerService.HintSize="496,374" sap2010:WorkflowViewState.IdRef="Sequence_8">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="ExceptionMessage" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign DisplayName="Assign ExceptionMessage" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_3">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[ExceptionMessage]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[InnerException.Message]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,141" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Warn" Message="[&quot;More than one exception code found, this is not a generic exception. The exception may be illegitimate. Skipping interpretation. [&quot;+ExceptionMessage+&quot;]&quot;]" />
                </Sequence>
              </ui:IfElseIfBlock.Then>
            </ui:IfElseIfBlock>
          </sc:BindingList>
        </ui:IfElseIfV2.ElseIfs>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:IfElseIfV2.Then>
          <Sequence DisplayName="" sap:VirtualizedContainerService.HintSize="476,351" sap2010:WorkflowViewState.IdRef="Sequence_7">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="ExceptionCode" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign ExceptionCode" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_2">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[ExceptionCode]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[Matches(0).ToString]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,141" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info" Message="[&quot;Exception code found, this is not a generic exception. Skipping interpretation. [&quot;+ExceptionCode+&quot;]&quot;]" />
          </Sequence>
        </ui:IfElseIfV2.Then>
      </ui:IfElseIfV2>
    </Sequence>
    <Sequence DisplayName="Verify Postconditions" sap:VirtualizedContainerService.HintSize="635,167" sap2010:WorkflowViewState.IdRef="Sequence_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:Comment sap:VirtualizedContainerService.HintSize="388,56" sap2010:WorkflowViewState.IdRef="Comment_3" Text="// No postconditions." />
    </Sequence>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="635,141" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;InterpretGenericException.xaml: Ending workflow.&quot;]" />
  </Sequence>
</Activity>